# Task ID: 5
# Title: Extension: Implement Offline Mode Cleaning Engine
# Status: pending
# Dependencies: 4
# Priority: medium
# Description: Implement the 'Offline Mode' functionality. This involves capturing selected text, processing it locally with a rules-based engine, structuring it as Markdown, and copying it to the clipboard.
# Details:
The logic will reside primarily in the service worker or a script included by the popup. Use `chrome.scripting.executeScript` to get the selected text from the active tab. The rules-based cleaner should perform tasks like removing extra line breaks, fixing spacing, etc. The output should be formatted as clean Markdown. Use the `navigator.clipboard.writeText` API to copy the result automatically.

# Test Strategy:
Unit test the cleaning and Markdown structuring functions with various input strings. Manually test the end-to-end flow in the browser: select different types of text on various websites, trigger the offline mode, and verify the clipboard content is correct.

# Subtasks:
## 1. IHP: Implement Hybrid Pipeline Orchestrator [pending]
### Dependencies: None
### Description: Implement the main orchestrator in `enhanced-processor.ts` to manage the two pipeline paths (Standard Readability vs. Intelligent Bypass) based on the bypass heuristic.
### Details:


## 2. IHP: Implement Bypass Heuristic [pending]
### Dependencies: None
### Description: Implement the `shouldBypassReadability` decision heuristic to intelligently determine whether to use the standard Readability.js path or the advanced bypass pipeline for complex/technical content.
### Details:


## 3. IHP: Implement Two-Stage Cleaning (Safe & Aggressive Filters) [pending]
### Dependencies: None
### Description: Implement the two-stage cleaning process: a 'safe' pass with UNWRAP rules for all content, and a conditional 'aggressive' pass with REMOVE rules for the bypass pipeline. This is located in `core/filters/boilerplate-filters.ts`.
### Details:


## 4. IHP: Implement Heuristic Scoring Engine [pending]
### Dependencies: None
### Description: Build the `ScoringEngine` in `core/scoring/scoring-engine.ts` to analyze and score content 'islands' based on heuristics like link density, class names, and structure to find the main content block.
### Details:


## 5. IHP: Implement Content Pruning [pending]
### Dependencies: None
### Description: Implement the `pruneNode` function within the ScoringEngine to recursively remove nested, low-scoring boilerplate from the winning content candidate.
### Details:


## 6. IHP: Implement Semantic Conversion for Tables [pending]
### Dependencies: None
### Description: Enhance `core/turndown-config.ts` with a custom rule (`tableToGfmOrJson`) to intelligently convert HTML tables into GFM pipe tables or a structured JSON fallback to preserve their semantic meaning for LLMs.
### Details:


